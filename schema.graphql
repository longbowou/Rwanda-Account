# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: AccountQuery
    mutation: AccountMutation
}

interface UserInterface {
    email: String!
    firstName: String
    fullName: String
    lastName: String
    username: String!
}

type AcceptServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type AccountMutation {
    acceptServicePurchase(input: AcceptServicePurchaseInput!): AcceptServicePurchase
    approveServicePurchase(input: ApproveServicePurchaseInput!): ApproveServicePurchase
    cancelServicePurchase(input: CancelServicePurchaseInput!): CancelServicePurchase
    changeAccountPassword(input: ChangeAccountPasswordInput!): ChangeAccountPassword
    createAccount(input: AccountInput!): CreateAccount
    createAdmin(input: AdminInput!): CreateAdmin
    createDeliverable(input: CreateDeliverableInput!): CreateDeliverable
    createDeposit(input: CreateDepositInput!): CreateDeposit
    createLitigation(input: CreateLitigationInput!): CreateLitigation
    createRefund(input: CreateRefundInput!): CreateRefund
    createService(input: CreateServiceInput!): CreateService
    createServiceCategory(input: CreateServiceCategoryInput!): CreateServiceCategory
    createServiceComment(input: CreateServiceCommentInput!): CreateServiceComment
    createServiceMedia(input: CreateServiceMediaInput!): CreateServiceMedia
    createServiceOption(input: CreateServiceOptionInput!): CreateServiceOption
    deleteAdmin(id: UUID!): DeleteAdmin
    deleteDeliverable(id: UUID!): DeleteDeliverable
    deleteDeliverableFile(id: UUID!): DeleteDeliverableFile
    deleteService(id: UUID!): DeleteService
    deleteServiceCategory(id: UUID!): DeleteServiceCategory
    deleteServiceComment(id: UUID!): DeleteServiceComment
    deleteServiceMedia(id: UUID!): DeleteServiceMedia
    deleteServiceOption(id: UUID!): DeleteServiceOption
    deliverServicePurchase(input: DeliverServicePurchaseInput!): DeliverServicePurchase
    handleLitigation(input: HandleLitigationInput!): HandleLitigation
    initServicePurchase(input: InitServicePurchaseInput!): InitServicePurchase
    login(input: LoginInput!): LoginAccount
    refreshToken(refreshToken: String): Refresh
    replyServiceComment(input: ReplyServiceCommentInput!): ReplyServiceComment
    revokeToken(refreshToken: String): Revoke
    updateAccount(input: UpdateAccountInput!): UpdateAccount
    updateAdmin(input: AdminUpdateInput!): UpdateAdmin
    updateDeliverable(input: UpdateDeliverableInput!): UpdateDeliverable
    updateService(input: UpdateServiceInput!): UpdateService
    updateServiceCategory(input: UpdateServiceCategoryInput!): UpdateServiceCategory
    updateServiceComment(input: UpdateServiceCommentInput!): UpdateServiceComment
    updateServiceMedia(input: UpdateServiceMediaInput!): UpdateServiceMedia
    updateServiceOption(input: UpdateServiceOptionInput!): UpdateServiceOption
    verifyToken(token: String): Verify
}

type AccountQuery {
    account: AccountType!
    deliverable(id: UUID!): DeliverableType!
    deliverableVersions: [DeliverableVersionType!]!
    litigation(id: UUID!): LitigationType!
    parameters: ParametersType!
    service(id: UUID!): ServiceType!
    "ServiceCategory list"
    serviceCategories(id: UUID): [ServiceCategoryType]
    serviceOrderPreview(service: UUID!, serviceOptions: [UUID!]): ServiceOrderType!
    servicePurchase(id: UUID!): ServicePurchaseType!
    "Service list"
    services(id: UUID): [ServiceType]
}

type AccountType implements UserInterface {
    balance: String!
    chatSet: [ChatType!]!
    createdAt: DateTime!
    depositSet: [DepositType!]!
    depositsSum: String!
    earningsSum: String!
    email: String!
    firstName: String
    fullName: String
    id: UUID!
    lastName: String
    litigationSet: [LitigationType!]!
    operationSet: [OperationType!]!
    ordersCount: String!
    purchasesCount: String!
    refundSet: [RefundType!]!
    refundsSum: String!
    serviceSet: [ServiceType!]!
    servicecommentSet: [ServiceCommentType!]!
    servicepurchaseSet: [ServicePurchaseType!]!
    servicesCount: String!
    updatedAt: DateTime!
    username: String!
}

type AdminType implements UserInterface {
    createdAt: DateTime!
    email: String!
    firstName: String
    fullName: String
    id: UUID!
    lastName: String
    litigationSet: [LitigationType!]!
    updatedAt: DateTime!
    username: String!
}

type ApproveServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type AuthType {
    refreshToken: String!
    token: String!
    tokenExpiresIn: String!
}

type CancelServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type ChangeAccountPassword {
    account: AccountType
    errors: [ErrorType]
}

type ChatType {
    account: AccountType!
    content: String!
    createdAt: DateTime!
    id: UUID!
    servicePurchase: ServicePurchaseType!
    updatedAt: DateTime!
}

type CreateAccount {
    account: AccountType
    errors: [ErrorType]
}

type CreateAdmin {
    admin: AdminType
    errors: [ErrorType]
}

type CreateDeliverable {
    deliverable: DeliverableType
    errors: [ErrorType]
}

type CreateDeposit {
    deposit: DepositType
    errors: [ErrorType]
}

type CreateLitigation {
    errors: [ErrorType]
    litigation: LitigationType
}

type CreateRefund {
    errors: [ErrorType]
    refund: RefundType
}

type CreateService {
    errors: [ErrorType]
    service: ServiceType
}

type CreateServiceCategory {
    errors: [ErrorType]
    serviceCategory: ServiceCategoryType
}

type CreateServiceComment {
    errors: [ErrorType]
    serviceComment: ServiceCommentType
}

type CreateServiceMedia {
    errors: [ErrorType]
    serviceMedia: ServiceMediaType
}

type CreateServiceOption {
    errors: [ErrorType]
    serviceOption: ServiceOptionType
}

type DeleteAdmin {
    errors: [ErrorType]
}

type DeleteDeliverable {
    errors: [ErrorType]
}

type DeleteDeliverableFile {
    errors: [ErrorType]
}

type DeleteService {
    errors: [ErrorType]
}

type DeleteServiceCategory {
    errors: [ErrorType]
}

type DeleteServiceComment {
    errors: [ErrorType]
}

type DeleteServiceMedia {
    errors: [ErrorType]
}

type DeleteServiceOption {
    errors: [ErrorType]
}

type DeliverServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type DeliverableFileType {
    createdAt: DateTime!
    deliverable: DeliverableType!
    file: String!
    id: UUID!
    name: String!
    updatedAt: DateTime!
}

type DeliverableType {
    createdAt: DateTime!
    deliverablefileSet: [DeliverableFileType!]!
    description: String!
    filesCount: Int!
    filesCountDisplay: String!
    id: UUID!
    published: Boolean!
    servicePurchase: ServicePurchaseType!
    title: String!
    updatedAt: DateTime!
    version: String!
    versionDisplay: String!
}

type DeliverableVersionType {
    label: String!
    value: String!
}

type DepositType {
    account: AccountType!
    amount: Int!
    createdAt: DateTime!
    id: UUID!
    updatedAt: DateTime!
}

type ErrorType {
    field: String!
    messages: [String!]!
}

type FundType {
    balance: Int!
    createdAt: DateTime!
    id: UUID!
    label: String!
    operationSet: [OperationType!]!
    updatedAt: DateTime!
}

type HandleLitigation {
    errors: [ErrorType]
    litigation: LitigationType
}

type InitServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type LitigationType {
    account: AccountType!
    admin: AdminType
    createdAt: DateTime!
    decision: LitigationDecision
    description: String!
    handled: Boolean!
    id: UUID!
    servicePurchase: ServicePurchaseType!
    title: String!
    updatedAt: DateTime!
}

type LoginAccount {
    account: AccountType
    auth: AuthType
    errors: [ErrorType]
}

type OperationType {
    account: AccountType
    amount: Int!
    createdAt: DateTime!
    description: String
    fund: FundType!
    id: UUID!
    servicePurchase: ServicePurchaseType
    type: String!
    updatedAt: DateTime!
}

type ParametersType {
    basePrice: String!
    currency: String!
}

type Refresh {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    refreshToken: String!
    token: String!
}

type RefundType {
    account: AccountType!
    amount: Int!
    createdAt: DateTime!
    id: UUID!
    phoneNumber: String
    updatedAt: DateTime!
}

type ReplyServiceComment {
    errors: [ErrorType]
    serviceComment: ServiceCommentType
}

type Revoke {
    revoked: Int!
}

type ServiceCategoryType {
    createdAt: DateTime!
    description: String
    id: UUID!
    label: String!
    serviceSet: [ServiceType!]!
    updatedAt: DateTime!
}

type ServiceCommentType {
    account: AccountType!
    content: String!
    createdAt: DateTime!
    id: UUID!
    positive: Boolean!
    replyAt: DateTime
    replyContent: String
    service: ServiceType!
    updatedAt: DateTime!
}

type ServiceMediaType {
    createdAt: DateTime!
    fileUrl: String
    id: UUID!
    isMain: Boolean!
    service: ServiceType!
    updatedAt: DateTime!
    url: String
}

type ServiceOptionType {
    createdAt: DateTime!
    delay: String!
    description: String
    id: UUID!
    label: String!
    price: String!
    service: ServiceType!
    servicepurchaseSet: [ServicePurchaseType!]!
    servicepurchaseserviceoptionSet: [ServicePurchaseServiceOptionType!]!
    updatedAt: DateTime!
}

type ServiceOrderType {
    basePrice: String!
    cannotPayWithWallet: Boolean!
    commission: String!
    commissionTva: String!
    mustBeDeliveredAt: String!
    service: ServiceType
    serviceOptions: [ServiceOptionType]
    totalDelay: String!
    totalOrderPrice: String!
    totalOrderPriceTtc: String!
    totalPrice: String!
    totalPriceTva: String!
}

type ServicePurchaseServiceOptionType {
    createdAt: DateTime!
    id: UUID!
    serviceOption: ServiceOptionType!
    servicePurchase: ServicePurchaseType!
    updatedAt: DateTime!
}

type ServicePurchaseTimeLine {
    color: String!
    description: String
    happenAt: String!
    status: String!
}

type ServicePurchaseType {
    accepted: Boolean!
    acceptedAt: DateTime
    account: AccountType!
    approved: Boolean!
    approvedAt: DateTime
    canAddDeliverable: Boolean!
    canBeAccepted: Boolean!
    canBeApproved: Boolean!
    canBeCanceled: Boolean!
    canBeDelivered: Boolean!
    canBeInDispute: Boolean!
    canceled: Boolean!
    canceledAt: DateTime
    chatSet: [ChatType!]!
    commission: Int!
    createdAt: DateTime!
    delay: String!
    deliverableSet: [DeliverableType!]!
    delivered: Boolean!
    deliveredAt: DateTime
    id: UUID!
    inDispute: Boolean!
    inDisputeAt: DateTime
    initiated: Boolean!
    litigation: LitigationType
    mustBeDeliveredAt: String
    number: String!
    operationSet: [OperationType!]!
    price: String!
    service: ServiceType!
    serviceOptions: [ServiceOptionType!]!
    servicepurchaseserviceoptionSet: [ServicePurchaseServiceOptionType!]!
    status: String!
    timelines: [ServicePurchaseTimeLine]!
    updatedAt: DateTime!
}

type ServiceType {
    account: AccountType!
    activated: Boolean!
    content: String!
    createdAt: DateTime!
    delay: Int!
    delayDisplay: String!
    id: UUID!
    keywords: String
    published: Boolean!
    serviceCategory: ServiceCategoryType!
    servicecommentSet: [ServiceCommentType!]!
    servicemediaSet: [ServiceMediaType!]!
    serviceoptionSet: [ServiceOptionType!]!
    servicepurchaseSet: [ServicePurchaseType!]!
    stars: Int!
    title: String!
    updatedAt: DateTime!
}

type UpdateAccount {
    account: AccountType
    errors: [ErrorType]
}

type UpdateAdmin {
    admin: AdminType
    errors: [ErrorType]
}

type UpdateDeliverable {
    deliverable: DeliverableType
    errors: [ErrorType]
}

type UpdateService {
    errors: [ErrorType]
    service: ServiceType
}

type UpdateServiceCategory {
    errors: [ErrorType]
    serviceCategory: ServiceCategoryType
}

type UpdateServiceComment {
    errors: [ErrorType]
    serviceComment: ServiceCommentType
}

type UpdateServiceMedia {
    errors: [ErrorType]
    serviceMedia: ServiceMediaType
}

type UpdateServiceOption {
    errors: [ErrorType]
    serviceOption: ServiceOptionType
}

type Verify {
    payload: GenericScalar!
}

"An enumeration."
enum LitigationDecision {
    "APPROVED"
    APPROVED
    "CANCELED"
    CANCELED
}

input AcceptServicePurchaseInput {
    id: UUID!
}

input AccountInput {
    email: String!
    firstName: String
    lastName: String
    password: String!
    passwordConfirmation: String!
    username: String!
}

input AdminInput {
    email: String!
    firstName: String
    isActive: Boolean
    isSuperuser: Boolean
    lastName: String
    password: String!
    passwordConfirmation: String!
    username: String!
}

input AdminUpdateInput {
    email: String
    firstName: String
    id: UUID!
    isActive: Boolean
    isSuperuser: Boolean
    lastName: String
    username: String
}

input ApproveServicePurchaseInput {
    id: UUID!
}

input CancelServicePurchaseInput {
    id: UUID!
}

input ChangeAccountPasswordInput {
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
}

input CreateDeliverableInput {
    description: String!
    published: Boolean
    servicePurchase: ID!
    title: String!
    version: String!
}

input CreateDepositInput {
    amount: Int!
}

input CreateLitigationInput {
    description: String!
    servicePurchase: ID!
    title: String!
}

input CreateRefundInput {
    amount: Int!
    phoneNumber: String!
}

input CreateServiceCategoryInput {
    description: String
    label: String!
}

input CreateServiceCommentInput {
    content: String!
    positive: Boolean
    service: ID!
}

input CreateServiceInput {
    content: String!
    delay: Int!
    keywords: String
    published: Boolean
    serviceCategory: ID!
    serviceMedias: [ServiceMediaInput]
    serviceOptions: [ServiceOptionInput]
    title: String!
}

input CreateServiceMediaInput {
    file: String
    isMain: Boolean
    service: ID!
    url: String
}

input CreateServiceOptionInput {
    delay: Int!
    description: String
    label: String!
    price: Int!
    service: ID!
}

input DeliverServicePurchaseInput {
    id: UUID!
}

input HandleLitigationInput {
    admin: UUID!
    decision: String
    id: UUID!
}

input InitServicePurchaseInput {
    service: ID!
    serviceOptions: [ID]
}

input LoginInput {
    login: String!
    password: String!
}

input ReplyServiceCommentInput {
    id: UUID!
    replyContent: String
}

input ServiceMediaInput {
    file: String
    url: String
}

input ServiceOptionInput {
    delay: Int!
    description: String
    label: String!
    price: Int!
}

input UpdateAccountInput {
    email: String
    firstName: String
    lastName: String
    username: String
}

input UpdateDeliverableInput {
    description: String
    id: UUID!
    published: Boolean
    title: String
    version: String
}

input UpdateServiceCategoryInput {
    description: String
    id: UUID!
    label: String
}

input UpdateServiceCommentInput {
    content: String
    id: UUID!
    positive: Boolean
}

input UpdateServiceInput {
    content: String
    delay: Int
    id: UUID!
    keywords: String
    published: Boolean
    serviceCategory: ID
    stars: Int
    title: String
}

input UpdateServiceMediaInput {
    file: String
    id: UUID!
    isMain: Boolean
    url: String
}

input UpdateServiceOptionInput {
    delay: Int
    description: String
    id: UUID!
    label: String
    price: Int
}


"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar