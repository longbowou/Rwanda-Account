# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: AccountQuery
    mutation: AccountMutation
    subscription: Subscription
}

interface UserInterface {
    email: String!
    firstName: String
    fullName: String
    imageUrl: String
    isActive: Boolean!
    isActiveDisplay: String!
    isOnline: Boolean!
    lastLogin: String
    lastName: String
    phoneNumber: String
    username: String!
}

type AcceptServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type AcceptServicePurchaseUpdateRequest {
    errors: [ErrorType]
    servicePurchaseUpdateRequest: ServicePurchaseUpdateRequestType
}

type AccountMutation {
    acceptServicePurchase(input: AcceptServicePurchaseInput!): AcceptServicePurchase
    acceptServicePurchaseUpdateRequest(input: AcceptServicePurchaseUpdateRequestInput!): AcceptServicePurchaseUpdateRequest
    activateAccount(user: UUID!): ActivateAccount
    approveServicePurchase(input: ApproveServicePurchaseInput!): ApproveServicePurchase
    cancelServicePurchase(input: CancelServicePurchaseInput!): CancelServicePurchase
    changeAccountPassword(input: ChangeAccountPasswordInput!): ChangeAccountPassword
    createAccount(input: AccountInput!): CreateAccount
    createChatMessage(input: CreateChatMessageInput!): CreateChatMessage
    createDeliverable(input: CreateDeliverableInput!): CreateDeliverable
    createLitigation(input: CreateLitigationInput!): CreateLitigation
    createService(input: CreateServiceInput!): CreateService
    createServiceComment(input: CreateServiceCommentInput!): CreateServiceComment
    createServiceOption(input: CreateServiceOptionInput!): CreateServiceOption
    deleteDeliverable(id: UUID!): DeleteDeliverable
    deleteDeliverableFile(id: UUID!): DeleteDeliverableFile
    deleteService(id: UUID!): DeleteService
    deleteServiceOption(id: UUID!): DeleteServiceOption
    deliverServicePurchase(input: DeliverServicePurchaseInput!): DeliverServicePurchase
    deliverServicePurchaseUpdateRequest(input: DeliverServicePurchaseUpdateRequestInput!): DeliverServicePurchaseUpdateRequest
    initiateDeposit(amount: Int!): InitiateDeposit
    initiateRefund(input: InitiateRefundInput!): InitiateRefund
    initiateServicePurchase(input: InitiateServicePurchaseInput!): InitiateServicePurchase
    initiateServicePurchaseUpdateRequest(input: InitiateServicePurchaseUpdateRequestInput!): InitiateServicePurchaseUpdateRequest
    login(input: LoginInput!): LoginAccount
    markUnmarkChatMessage(chatMessage: UUID!): MarkUnmarkChatMessage
    refreshToken(refreshToken: String): Refresh
    refuseServicePurchase(input: RefuseServicePurchaseInput!): RefuseServicePurchase
    refuseServicePurchaseUpdateRequest(input: RefuseServicePurchaseUpdateRequestInput!): RefuseServicePurchaseUpdateRequest
    revokeToken(refreshToken: String): Revoke
    sendVerificationMail(login: String!): SendVerificationMail
    submitServiceForApproval(input: SubmitServiceForApprovalInput!): SubmitServiceForApproval
    updateAccount(input: UpdateAccountInput!): UpdateAccount
    updateDeliverable(input: UpdateDeliverableInput!): UpdateDeliverable
    updateService(input: UpdateServiceInput!): UpdateService
    updateServiceOption(input: UpdateServiceOptionInput!): UpdateServiceOption
    verifyToken(token: String): Verify
}

type AccountOnlineSubscription {
    account: AccountType
}

type AccountQuery {
    account: AccountType
    deliverable(id: UUID!): DeliverableType!
    deliverableVersions: [DeliverableVersionType!]!
    litigation(id: UUID!): LitigationType!
    parameters: ParametersType
    payment(id: UUID!): PaymentType
    refundWay: RefundWayType
    refundWays: [RefundWayType]
    service(id: UUID!): ServiceType
    serviceCategories: [ServiceCategoryType]
    serviceCategory(id: UUID!): ServiceCategoryType
    serviceCategoryServices(id: UUID!): ServiceType
    serviceCommentTypes: [ServiceCommentTypeType]
    serviceOption(id: UUID!): ServiceOptionType
    serviceOrderPreview(service: UUID!, serviceOptions: [UUID!]): ServiceOrderType
    servicePurchase(id: UUID!): ServicePurchaseType!
    services: [ServiceType]
}

type AccountType implements UserInterface {
    balance: String!
    chatmessageSet: [ChatMessageType!]!
    createdAt: String!
    depositSet: [DepositType!]!
    depositsSum: String!
    earningsSum: String!
    email: String!
    firstName: String
    fullName: String
    id: UUID!
    imageUrl: String
    isActive: Boolean!
    isActiveDisplay: String!
    isOnline: Boolean!
    lastLogin: String
    lastName: String
    litigationSet: [LitigationType!]!
    operationSet: [OperationType!]!
    ordersCount: String!
    paymentSet: [PaymentType!]!
    phoneNumber: String
    purchasesCount: String!
    refundSet: [RefundType!]!
    refundsSum: String!
    serviceSet: [ServiceType!]!
    servicecommentSet: [ServiceCommentType!]!
    servicepurchaseSet: [ServicePurchaseType!]!
    servicesCount: String!
    user: UserType!
    username: String!
}

type ActivateAccount {
    activated: Boolean
    message: String
}

type AdminType implements UserInterface {
    createdAt: DateTime!
    email: String!
    firstName: String
    fullName: String
    id: UUID!
    imageUrl: String
    isActive: Boolean!
    isActiveDisplay: String!
    isOnline: Boolean!
    lastLogin: String
    lastName: String
    litigationSet: [LitigationType!]!
    phoneNumber: String
    user: UserType!
    username: String!
}

type ApproveServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type AuthType {
    refreshToken: String!
    token: String!
    tokenExpiresIn: String!
}

type CancelServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type ChangeAccountPassword {
    account: AccountType
    errors: [ErrorType]
}

type ChatMessageSubscription {
    message: ServicePurchaseChatMessageType
}

type ChatMessageType {
    account: AccountType!
    content: String
    createdAt: DateTime!
    display: ServicePurchaseChatMessageType!
    file: String
    fileName: String
    fileSize: Int!
    id: UUID!
    isFile: Boolean!
    servicePurchase: ServicePurchaseType!
}

type CreateAccount {
    account: AccountType
    errors: [ErrorType]
}

type CreateChatMessage {
    chatMessage: ChatMessageType
    errors: [ErrorType]
}

type CreateDeliverable {
    deliverable: DeliverableType
    errors: [ErrorType]
}

type CreateLitigation {
    errors: [ErrorType]
    litigation: LitigationType
}

type CreateService {
    errors: [ErrorType]
    service: ServiceType
}

type CreateServiceComment {
    errors: [ErrorType]
    serviceComment: ServiceCommentType
}

type CreateServiceOption {
    errors: [ErrorType]
    serviceOption: ServiceOptionType
}

type DeleteDeliverable {
    errors: [ErrorType]
}

type DeleteDeliverableFile {
    errors: [ErrorType]
}

type DeleteService {
    errors: [ErrorType]
}

type DeleteServiceOption {
    errors: [ErrorType]
}

type DeliverServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type DeliverServicePurchaseUpdateRequest {
    errors: [ErrorType]
    servicePurchaseUpdateRequest: ServicePurchaseUpdateRequestType
}

type DeliverableFileType {
    createdAt: DateTime!
    deliverable: DeliverableType!
    file: String!
    id: UUID!
    name: String!
    size: Int!
}

type DeliverableType {
    createdAt: DateTime!
    deliverablefileSet: [DeliverableFileType!]!
    description: String!
    filesCount: Int!
    filesCountDisplay: String!
    id: UUID!
    published: Boolean!
    servicePurchase: ServicePurchaseType!
    title: String!
    version: String!
    versionDisplay: String!
}

type DeliverableVersionType {
    label: String!
    value: String!
}

type DepositType {
    account: AccountType!
    amount: Int!
    createdAt: DateTime!
    id: UUID!
    payment: PaymentType
}

type ErrorType {
    field: String!
    messages: [String!]!
}

type FundType {
    balance: Int!
    createdAt: DateTime!
    id: UUID!
    label: String!
    operationSet: [OperationType!]!
}

type InitiateDeposit {
    errors: [ErrorType]
    formData: String
    paymentId: UUID
    paymentUrl: String
}

type InitiateRefund {
    errors: [ErrorType]
    refund: RefundType
}

type InitiateServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type InitiateServicePurchaseUpdateRequest {
    errors: [ErrorType]
    servicePurchaseUpdateRequest: ServicePurchaseUpdateRequestType
}

type LitigationType {
    account: AccountType!
    admin: AdminType
    approved: Boolean!
    canBeHandled: Boolean!
    canceled: Boolean!
    content: String!
    createdAt: DateTime!
    decision: String
    handled: Boolean!
    handledAt: DateTime
    id: UUID!
    opened: Boolean!
    reason: String
    servicePurchase: ServicePurchaseType!
    status: String!
    title: String!
}

type LoginAccount {
    account: AccountType
    auth: AuthType
    canResendVerificationMail: Boolean
    errors: [ErrorType]
}

type MarkUnmarkChatMessage {
    marked: Boolean!
}

type OnlineSubscription {
    account: AccountType
}

type OperationType {
    account: AccountType
    amount: Int!
    createdAt: DateTime!
    description: String
    fund: FundType!
    id: UUID!
    servicePurchase: ServicePurchaseType
    type: String!
}

type ParametersType {
    basePrice: String!
    currency: String!
}

type PaymentType {
    account: AccountType!
    amount: Int!
    canceled: Boolean!
    celPhoneNum: String
    comment: String
    confirmed: Boolean!
    cpmPayid: String
    cpmPhonePrefixe: String
    cpmResult: String
    cpmTransStatus: String
    createdAt: DateTime!
    deposit: DepositType
    id: UUID!
    paymentMethod: String
    refund: RefundType
    signature: String
    status: String!
    type: String!
}

type Refresh {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    refreshToken: String!
    token: String!
}

type RefundType {
    account: AccountType!
    amount: Int!
    createdAt: DateTime!
    id: UUID!
    payment: PaymentType
    phoneNumber: String
    refundWay: RefundWayType
    refusedReason: String
    status: String!
}

type RefundWayType {
    countryCode: String!
    createdAt: DateTime!
    id: UUID!
    name: String!
    published: Boolean!
    refundSet: [RefundType!]!
}

type RefuseServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type RefuseServicePurchaseUpdateRequest {
    errors: [ErrorType]
    servicePurchaseUpdateRequest: ServicePurchaseUpdateRequestType
}

type Revoke {
    revoked: Int!
}

type SendVerificationMail {
    sent: Boolean
}

type ServiceCategoryType {
    createdAt: DateTime!
    description: String
    id: UUID!
    index: Int!
    label: String!
    published: Boolean!
    serviceSet: [ServiceType!]!
    services: [ServiceType]!
}

type ServiceCommentType {
    account: AccountType!
    content: String!
    createdAt: String!
    id: UUID!
    negative: Boolean!
    positive: Boolean!
    published: Boolean!
    replyAt: DateTime
    replyContent: String
    servicePurchase: ServicePurchaseType
    type: String
}

type ServiceCommentTypeType {
    name: String!
    value: String!
}

type ServiceMediaType {
    createdAt: DateTime!
    fileUrl: String
    id: UUID!
    isMain: Boolean!
    service: ServiceType!
    url: String
}

type ServiceOptionType {
    createdAt: DateTime!
    delay: Int!
    delayDisplay: String!
    delayPreviewDisplay: String!
    description: String
    id: UUID!
    label: String!
    price: Int!
    priceDisplay: String!
    published: Boolean!
    publishedDisplay: String!
    service: ServiceType!
    servicepurchaseSet: [ServicePurchaseType!]!
    servicepurchaseserviceoptionSet: [ServicePurchaseServiceOptionType!]!
}

type ServiceOrderType {
    basePrice: String!
    cannotPayWithWallet: Boolean!
    commission: String!
    commissionTva: String!
    deadlineAt: String!
    service: ServiceType
    serviceOptions: [ServiceOptionType]
    totalDelay: String!
    totalOrderPrice: String!
    totalOrderPriceTtc: String!
    totalPrice: String!
    totalPriceTva: String!
}

type ServicePurchaseChatMessageType {
    content: String
    createdAt: Float!
    date: Int!
    dateDisplay: String!
    fileName: String
    fileSize: String
    fileUrl: String
    fromBuyer: Boolean!
    fromCurrentAccount: Boolean!
    id: UUID!
    isFile: Boolean!
    marked: Boolean!
    showDate: Boolean!
    time: String!
}

type ServicePurchaseServiceOptionType {
    createdAt: DateTime!
    id: UUID!
    serviceOption: ServiceOptionType!
    servicePurchase: ServicePurchaseType!
}

type ServicePurchaseSubscription {
    servicePurchase: ServicePurchaseType
}

type ServicePurchaseTimeLineType {
    color: String!
    description: String
    happenAt: String!
    status: String!
}

type ServicePurchaseType {
    accepted: Boolean!
    acceptedAt: DateTime
    account: AccountType!
    approved: Boolean!
    approvedAt: DateTime
    basePrice: String!
    canAddDeliverable: Boolean!
    canAskForUpdate: Boolean!
    canBeAccepted: Boolean!
    canBeApproved: Boolean!
    canBeCanceled: Boolean!
    canBeCommented: Boolean!
    canBeDelivered: Boolean!
    canBeInDispute: Boolean!
    canBeRefused: Boolean!
    canChat: Boolean!
    canceled: Boolean!
    canceledAt: DateTime
    chat: [ServicePurchaseChatMessageType]!
    chatFiles: [ServicePurchaseChatMessageType]!
    chatFilesHistory: [ServicePurchaseChatMessageType]!
    chatHistory: [ServicePurchaseChatMessageType]!
    chatMarked: [ServicePurchaseChatMessageType]!
    chatmessageSet: [ChatMessageType!]!
    commission: Int!
    createdAt: DateTime!
    deadlineAt: String
    delay: String!
    deliverableSet: [DeliverableType!]!
    delivered: Boolean!
    deliveredAt: DateTime
    hasBeenAccepted: Boolean!
    hasFinalDeliverable: Boolean!
    id: UUID!
    inDispute: Boolean!
    inDisputeAt: DateTime
    initiated: Boolean!
    lastUpdateRequest: ServicePurchaseUpdateRequestType
    litigation: LitigationType
    number: String!
    operationSet: [OperationType!]!
    price: String!
    refused: Boolean!
    refusedAt: DateTime
    refusedReason: String
    service: ServiceType!
    serviceOptions: [ServiceOptionType!]!
    servicecommentSet: [ServiceCommentType!]!
    servicepurchaseserviceoptionSet: [ServicePurchaseServiceOptionType!]!
    servicepurchaseupdaterequestSet: [ServicePurchaseUpdateRequestType!]!
    status: String!
    timelines: [ServicePurchaseTimeLineType]!
    updateAccepted: Boolean!
    updateDelivered: Boolean!
    updateInitiated: Boolean!
    updateRefused: Boolean!
    updateRequest: ServicePurchaseUpdateRequestType
}

type ServicePurchaseUpdateRequestType {
    accepted: Boolean!
    acceptedAt: DateTime
    canBeAccepted: Boolean!
    canBeDelivered: Boolean!
    canBeRefused: Boolean!
    content: String!
    createdAt: DateTime!
    deadlineAt: String
    delivered: Boolean!
    deliveredAt: DateTime
    id: UUID!
    initiated: Boolean!
    reason: String
    refused: Boolean!
    refusedAt: DateTime
    servicePurchase: ServicePurchaseType!
    status: String!
    title: String!
}

type ServiceType {
    accepted: Boolean!
    acceptedAt: DateTime
    account: AccountType!
    basePrice: Int!
    canBeAccepted: Boolean!
    canBeRejected: Boolean!
    canBeSubmittedForApproval: Boolean!
    comments: [ServiceCommentType]
    content: String!
    createdAt: String!
    delay: Int!
    delayDisplay: String!
    file: String
    fileUrl: String
    id: UUID!
    keywords: String
    negativeCommentsCount: String!
    options: [ServiceOptionType]!
    optionsCount: Int!
    optionsCountDisplay: String!
    positiveCommentsCount: String!
    published: Boolean!
    publishedByAdmin: Boolean!
    publishedDisplay: String!
    rejected: Boolean!
    rejectedReason: String
    serviceCategory: ServiceCategoryType!
    servicemediaSet: [ServiceMediaType!]!
    serviceoptionSet: [ServiceOptionType!]!
    servicepurchaseSet: [ServicePurchaseType!]!
    stars: Int!
    status: String!
    submittedForApproval: Boolean!
    title: String!
}

type SubmitServiceForApproval {
    errors: [ErrorType]
    service: ServiceType
}

type Subscription {
    accountOnlineSubscription(account: UUID!): AccountOnlineSubscription
    chatMessageSubscription(servicePurchase: UUID!): ChatMessageSubscription
    onlineSubscription: OnlineSubscription
    servicePurchaseSubscription(id: UUID!): ServicePurchaseSubscription
}

type UpdateAccount {
    account: AccountType
    errors: [ErrorType]
}

type UpdateDeliverable {
    deliverable: DeliverableType
    errors: [ErrorType]
}

type UpdateService {
    errors: [ErrorType]
    service: ServiceType
}

type UpdateServiceOption {
    errors: [ErrorType]
    serviceOption: ServiceOptionType
}

type UserType {
    account: AccountType
    admin: AdminType
    createdAt: DateTime!
    dateJoined: DateTime!
    email: String!
    emailVerificationExpireAt: DateTime
    emailVerified: Boolean!
    firstName: String!
    id: UUID!
    image: String
    "Précise si l’utilisateur doit être considéré comme actif. Décochez ceci plutôt que de supprimer le compte."
    isActive: Boolean!
    isOnline: Boolean!
    "Précise si l’utilisateur peut se connecter à ce site d'administration."
    isStaff: Boolean!
    "Précise que l’utilisateur possède toutes les permissions sans les assigner explicitement."
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    password: String!
    phoneNumber: String
    "Requis. 150 caractères maximum. Uniquement des lettres, nombres et les caractères « @ », « . », « + », « - » et « _ »."
    username: String!
}

type Verify {
    payload: GenericScalar!
}

input AcceptServicePurchaseInput {
    id: UUID!
}

input AcceptServicePurchaseUpdateRequestInput {
    id: UUID!
}

input AccountInput {
    email: String!
    firstName: String
    lastName: String
    password: String!
    passwordConfirmation: String!
    username: String!
}

input ApproveServicePurchaseInput {
    id: UUID!
}

input CancelServicePurchaseInput {
    id: UUID!
}

input ChangeAccountPasswordInput {
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
}

input CreateChatMessageInput {
    content: String
    servicePurchase: ID!
}

input CreateDeliverableInput {
    description: String!
    published: Boolean
    servicePurchase: ID!
    title: String!
    version: String!
}

input CreateLitigationInput {
    content: String!
    servicePurchase: ID!
    title: String!
}

input CreateServiceCommentInput {
    content: String!
    servicePurchase: UUID!
    type: String!
}

input CreateServiceInput {
    content: String!
    delay: Int!
    file: String
    keywords: String
    published: Boolean
    serviceCategory: ID!
    title: String!
}

input CreateServiceOptionInput {
    delay: Int!
    description: String
    label: String!
    price: Int!
    published: Boolean
    service: ID!
}

input DeliverServicePurchaseInput {
    id: UUID!
}

input DeliverServicePurchaseUpdateRequestInput {
    id: UUID!
}

input InitiateRefundInput {
    amount: Int!
    phoneNumber: String!
    refundWay: UUID!
}

input InitiateServicePurchaseInput {
    service: ID!
    serviceOptions: [ID]
}

input InitiateServicePurchaseUpdateRequestInput {
    content: String!
    servicePurchase: ID!
    title: String!
}

input LoginInput {
    login: String!
    password: String!
}

input RefuseServicePurchaseInput {
    id: UUID!
    refusedReason: String!
}

input RefuseServicePurchaseUpdateRequestInput {
    id: UUID!
    reason: String!
}

input SubmitServiceForApprovalInput {
    id: UUID!
}

input UpdateAccountInput {
    email: String
    firstName: String
    lastName: String
    phoneNumber: String
    username: String
}

input UpdateDeliverableInput {
    description: String
    id: UUID!
    published: Boolean
    title: String
    version: String
}

input UpdateServiceInput {
    content: String
    delay: Int
    file: String
    id: UUID!
    keywords: String
    published: Boolean
    serviceCategory: ID
    title: String
}

input UpdateServiceOptionInput {
    delay: Int
    description: String
    id: UUID!
    label: String
    price: Int
    published: Boolean
}


"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar